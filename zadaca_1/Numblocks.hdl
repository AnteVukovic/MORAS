CHIP Numblocks{
	IN in[16];
	OUT out[16];
	
	PARTS:
	Xor(a=in[0], b=in[1], out=xor1);
	Xor(a=in[1], b=in[2], out=xor2);
	Xor(a=in[2], b=in[3], out=xor3);
	Xor(a=in[3], b=in[4], out=xor4);
	Xor(a=in[4], b=in[5], out=xor5);
	Xor(a=in[5], b=in[6], out=xor6);
	Xor(a=in[6], b=in[7], out=xor7);
	Xor(a=in[7], b=in[8], out=xor8);
	Xor(a=in[8], b=in[9], out=xor9);
	Xor(a=in[9], b=in[10], out=xor10);
	Xor(a=in[10], b=in[11], out=xor11);
	Xor(a=in[11], b=in[12], out=xor12);
	Xor(a=in[12], b=in[13], out=xor13);
	Xor(a=in[13], b=in[14], out=xor14);
	Xor(a=in[14], b=in[15], out=xor15);
	Not16(in=in, out=nin);
    Add16(a=in, b=nin, out=dif);
	Inc16(in=dif, out=abc);
	Add16(a=abc, b[0]=xor1, out=abc1);
	Add16(a=abc1, b[0]=xor2, out=abc2);
	Add16(a=abc2, b[0]=xor3, out=abc3);
	Add16(a=abc3, b[0]=xor4, out=abc4);
	Add16(a=abc4, b[0]=xor5, out=abc5);
	Add16(a=abc5, b[0]=xor6, out=abc6);
	Add16(a=abc6, b[0]=xor7, out=abc7);
	Add16(a=abc7, b[0]=xor8, out=abc8);
	Add16(a=abc8, b[0]=xor9, out=abc9);
	Add16(a=abc9, b[0]=xor10, out=abc10);
	Add16(a=abc10, b[0]=xor11, out=abc11);
	Add16(a=abc11, b[0]=xor12, out=abc12);
	Add16(a=abc12, b[0]=xor13, out=abc13);
	Add16(a=abc13, b[0]=xor14, out=abc14);
	Add16(a=abc14, b[0]=xor15, out=abc15);
	Inc16(in=abc15, out=out);
}